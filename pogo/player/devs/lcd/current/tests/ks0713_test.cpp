// ks0713_test.cpp: test for the ks0713 lcd driver.
// danb@iobjects.com 10/09/01
// (c) Interactive Objects


#include <pkgconf/kernel.h>
#include <cyg/kernel/kapi.h>            /* All the kernel specific stuff */
#include <cyg/hal/hal_arch.h>           /* CYGNUM_HAL_STACK_SIZE_TYPICAL */
#include <cyg/hal/hal_edb7xxx.h>
#include <cyg/infra/diag.h>
#include <stdio.h>

#include <devs/lcd/lcd.h>
/* DEFINES */

#define DEBUG(s...) diag_printf(##s)

#define NTHREADS 1
#define STACKSIZE (CYGNUM_HAL_STACK_SIZE_TYPICAL + (16 * 4096))

/* STATICS */

static cyg_handle_t _ThreadH[NTHREADS];
static cyg_thread _Thread[NTHREADS];
static char _ThreadStack[NTHREADS][STACKSIZE];

static cyg_uint8 ucIobjectsLogoBitmap[1024] = {
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xfe,0x0f,0xff,0xff,0xff,0xff,0xff,0xfc,0x7c,0x07,0xff,0xff,
0xff,0xff,0xff,0xc0,0x78,0x01,0xff,0xff,0xff,0xff,0xfe,0x00,0x70,0x00,0xff,0xff,
0xff,0xff,0xfc,0x00,0x60,0xf0,0x7f,0xff,0xff,0xff,0xfc,0x3d,0x41,0x80,0x0f,0xff,
0xff,0xff,0xfc,0x20,0x43,0x80,0x01,0xff,0xff,0xff,0xfc,0x20,0x07,0xc0,0x00,0xff,
0xff,0xff,0xfc,0x02,0x0f,0xe0,0x0c,0x7f,0xff,0xff,0xfc,0x39,0x1f,0xc0,0x08,0x3f,
0xff,0xff,0xfc,0x65,0x1f,0x3c,0xf6,0x1f,0xff,0xff,0xfc,0x4d,0x1f,0x44,0xd8,0x0f,
0xff,0xff,0xfc,0x61,0x0e,0xec,0xa6,0x0d,0xff,0xff,0xfc,0x3e,0x2e,0xda,0x5a,0x11,
0xff,0xff,0xfc,0x00,0x62,0x7e,0xfb,0x17,0xff,0xff,0xfe,0x3e,0x41,0xfe,0xfd,0x0b,
0xff,0xff,0xfe,0x20,0x43,0xfe,0xfe,0x83,0xff,0xff,0xfe,0x38,0x03,0xbe,0xfd,0x83,
0xff,0xff,0xfe,0x08,0x03,0x9c,0x3e,0x83,0xff,0xff,0xfe,0x08,0x0f,0x38,0x9d,0x83,
0xff,0xff,0xfe,0x80,0x3a,0xb8,0xde,0x87,0xff,0xff,0xfe,0x7a,0x7e,0xb8,0x9d,0x87,
0xff,0xff,0xfe,0x20,0x7a,0xb9,0x9e,0x87,0xff,0xff,0xfe,0x20,0x3e,0xac,0x3d,0x8f,
0xff,0xff,0xfe,0x20,0x03,0x3f,0xfd,0x8f,0xff,0xff,0xfe,0x30,0x03,0xdc,0x7e,0x87,
0xff,0xff,0xfe,0x28,0x01,0xe0,0x3d,0xa7,0xff,0xff,0xfe,0x38,0x06,0xf8,0x99,0x63,
0xff,0xff,0xfe,0x28,0x07,0x78,0xd2,0x73,0xff,0xff,0xfe,0x20,0x07,0xb9,0x8f,0xb1,
0xff,0xff,0xfe,0x20,0x1f,0xc4,0x1f,0xf1,0xff,0xff,0xfe,0x38,0x1f,0xfe,0x3f,0xe3,
0xff,0xff,0xfe,0x28,0x1f,0xff,0xff,0xe3,0xff,0xff,0xfe,0x28,0x3f,0xf0,0xff,0xc7,
0xff,0xff,0xfe,0x20,0xff,0xe0,0x3f,0xc7,0xff,0xff,0xfe,0x28,0xff,0xc7,0x07,0x0f,
0xff,0xff,0xfe,0x3c,0xff,0x9f,0xc0,0x1f,0xff,0xff,0xfe,0x28,0xfe,0x3f,0xf8,0x3f,
0xff,0xff,0xfe,0x20,0x38,0x7f,0xfc,0x7f,0xff,0xff,0xfe,0x20,0x00,0xff,0xff,0xff,
0xff,0xff,0xfe,0x18,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0x30,0x0f,0xff,0xff,0xff,
0xff,0xff,0xff,0x20,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x80,0x00,0x00,0x0f,
0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x0f,0xff,0xff,0xff,0x8f,0x80,0x00,0x00,0x0f,
0xff,0xff,0xff,0x77,0x80,0x00,0x00,0x1f,0xff,0xff,0xff,0x01,0x80,0x00,0x00,0x1f,
0xff,0xff,0xff,0xff,0x83,0xff,0xfc,0x1f,0xff,0xff,0xff,0x05,0x87,0xff,0xf8,0x3f,
0xff,0xff,0xff,0xff,0x83,0xff,0xf8,0x3f,0xff,0xff,0xfd,0x8f,0x81,0xff,0xf0,0x7f,
0xff,0xff,0xfd,0x77,0xc0,0x7f,0xc0,0xff,0xff,0xff,0xfe,0x07,0xf0,0x00,0x01,0xff,
0xff,0xff,0xff,0xff,0xfe,0x00,0x0f,0xff,0xff,0xff,0xff,0x05,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xc0,0x03,0xe7,0xff,0xff,0xff,0xff,0xf7,0x80,0x01,0xc3,0xff,
0xff,0xff,0xff,0x01,0x80,0x00,0xc1,0xff,0xff,0xff,0xff,0xf7,0x87,0xf8,0xe1,0xff,
0xff,0xff,0xff,0xff,0x8f,0xfc,0xf1,0xff,0xff,0xff,0xff,0xb7,0xc0,0x00,0xc1,0xff,
0xff,0xff,0xff,0x57,0x80,0x00,0x01,0xff,0xff,0xff,0xff,0x0f,0x80,0x00,0x03,0xff,
0xff,0xff,0xff,0xff,0x80,0x00,0x07,0xff,0xff,0xff,0xff,0x81,0xbf,0xff,0xff,0xff,
0xff,0xff,0xff,0x7f,0xf0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x01,0xff,0xff,
0xff,0xff,0xff,0xff,0x80,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0xfc,0x7f,0xff,
0xff,0xff,0xff,0xb7,0xc3,0xfe,0x7f,0xff,0xff,0xff,0xff,0x57,0xe0,0x00,0x3f,0xff,
0xff,0xff,0xff,0x0f,0x80,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x3f,
0xff,0xff,0xff,0x87,0x80,0x00,0x00,0x1f,0xff,0xff,0xff,0x7f,0x9f,0xff,0xfe,0x1f,
0xff,0xff,0xff,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe1,0x83,0xff,
0xff,0xff,0xff,0x8f,0x00,0x01,0x03,0xff,0xff,0xff,0xff,0x77,0x00,0x01,0x07,0xff,
0xff,0xff,0xff,0x01,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,
0xff,0xff,0xff,0x05,0xf8,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x07,0xff,
0xff,0xff,0xff,0x8f,0xc0,0x00,0x03,0xff,0xff,0xff,0xff,0x77,0xc0,0x00,0x01,0xff,
0xff,0xff,0xff,0x8f,0x80,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x80,0x06,0x00,0x7f,
0xff,0xff,0xff,0xff,0x80,0x1f,0x80,0x7f,0xff,0xff,0xff,0xff,0x80,0x3f,0xe0,0x7f,
0xff,0xff,0xff,0x83,0x80,0x3f,0xe0,0x7f,0xff,0xff,0xff,0x7d,0x80,0x0f,0x80,0xff,
0xff,0xff,0xff,0x7d,0xc0,0x07,0x00,0xff,0xff,0xff,0xff,0x83,0xe0,0x00,0x01,0xff,
0xff,0xff,0xff,0xff,0xf0,0x00,0x03,0xff,0xff,0xff,0xff,0x73,0xfc,0x00,0x0f,0xff,
0xff,0xff,0xff,0x6d,0xdf,0x80,0x3f,0xff,0xff,0xff,0xff,0x8d,0x1f,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,};

/* FUNCTIONS */

static void
_LCDTestThread(CYG_ADDRESS Data)
{
    DEBUG("+%s\n", __FUNCTION__);

    for (int r = 0; r < 20; r++)
	{
		LCDEnable();
		DEBUG("LCD Enabled\n");
		
#if 1
		LCDClear();
		DEBUG("LCD Cleared\n");
#endif
		
#if 1
		for (int i = 0; i < 2; ++i) {
			for (int Y = 0; Y < 64; ++Y) {
				for (int X = 0; X < 128; ++X) {
					LCDPutPixel(1, X, Y);
				}
			}
			
			cyg_thread_delay(100);
			
			for (int Y = 63; Y >= 0; --Y) {
				for (int X = 127; X >= 0; --X) {
					LCDPutPixel(0, X, Y);
				}
			}
			
			cyg_thread_delay(100);
		}
#endif
		
#if 1
		LCDWriteInverted(ucIobjectsLogoBitmap, sizeof(ucIobjectsLogoBitmap));
		DEBUG("LCDWrtieInverted()\n");
		cyg_thread_delay(100);
#endif
		
#if 1
		LCDWriteRaw(ucIobjectsLogoBitmap, sizeof(ucIobjectsLogoBitmap));
		DEBUG("LCDWriteRaw()\n");
		cyg_thread_delay(100);
#endif
		
#if 0
		for (int j = 0; j < 5; ++j) {
			LCDSetBacklight(j%2);
			DEBUG("LCDSetBacklight(%d)\n", (j%2));
			cyg_thread_delay(100);
		}
#endif
		
#if 1
		LCDDisable();
		DEBUG("LCD Disabled\n");
		cyg_thread_delay(100);
#endif
	}
	
    DEBUG("-%s\n", __FUNCTION__);
}

extern "C" void cyg_user_start(void);

void cyg_user_start(void)
{
    DEBUG("+%s\n", __FUNCTION__);
    
    cyg_thread_create(10, _LCDTestThread, (cyg_addrword_t) 0, "LCDTestThread",
		      (void *)_ThreadStack[0], STACKSIZE, &_ThreadH[0], &_Thread[0]);
    cyg_thread_resume(_ThreadH[0]);
	
    DEBUG("-%s\n", __FUNCTION__);
}

